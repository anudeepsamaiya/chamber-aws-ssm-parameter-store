name: Test Action Locally

on:
  workflow_dispatch:
  # For local testing with act: https://github.com/nektos/act
  # Run with: act -j test-action

env:
  TEST_PARAM_1: "/test-action/param1"
  TEST_PARAM_2: "/test-action/param2"
  TEST_VALUE_1: "value1"
  TEST_VALUE_2: "value2"

jobs:
  test-action:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      # Setup LocalStack for mocking AWS services
      - name: Setup LocalStack
        run: |
          docker run -d --name localstack -p 4566:4566 -e SERVICES=ssm localstack/localstack:latest
          # Wait for LocalStack to be ready
          sleep 10
          # Configure AWS CLI to use LocalStack
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region us-east-1
          aws configure set output json
          aws configure set endpoint_url http://localhost:4566

      # Create test parameters in LocalStack
      - name: Create test parameters
        run: |
          aws --endpoint-url=http://localhost:4566 ssm put-parameter --name "$TEST_PARAM_1" --value "$TEST_VALUE_1" --type String --overwrite
          aws --endpoint-url=http://localhost:4566 ssm put-parameter --name "$TEST_PARAM_2" --value "$TEST_VALUE_2" --type String --overwrite
          # Verify parameters were created
          aws --endpoint-url=http://localhost:4566 ssm get-parameter --name "$TEST_PARAM_1" --query "Parameter.Value"
          aws --endpoint-url=http://localhost:4566 ssm get-parameter --name "$TEST_PARAM_2" --query "Parameter.Value"

      # Install Chamber locally for testing
      - name: Install Chamber
        run: |
          CHAMBER_VERSION="latest" # or specify a version
          echo "Installing Chamber version $CHAMBER_VERSION..."
          mkdir -p /tmp/chamber
          curl -sSL "https://github.com/segmentio/chamber/releases/download/v$CHAMBER_VERSION/chamber-v$CHAMBER_VERSION-linux-amd64" -o /tmp/chamber/chamber
          chmod +x /tmp/chamber/chamber
          sudo mv /tmp/chamber/chamber /usr/local/bin/chamber
          chamber version

      # Test action with namespaced parameters
      - name: Test action with namespaced parameters
        uses: ./
        with:
          parameters:
            - "${{ env.TEST_PARAM_1 }}"
            - "${{ env.TEST_PARAM_2 }}"
          namespaced: 'true'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify namespaced environment variables
        run: |
          if [ "$TEST_ACTION_PARAM1" != "$TEST_VALUE_1" ]; then
            echo "Namespaced test failed: TEST_ACTION_PARAM1 = $TEST_ACTION_PARAM1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$TEST_ACTION_PARAM2" != "$TEST_VALUE_2" ]; then
            echo "Namespaced test failed: TEST_ACTION_PARAM2 = $TEST_ACTION_PARAM2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Namespaced test passed!"

      # Test action with non-namespaced parameters
      - name: Test action with non-namespaced parameters
        uses: ./
        with:
          parameters:
            - "${{ env.TEST_PARAM_1 }}"
            - "${{ env.TEST_PARAM_2 }}"
          namespaced: 'false'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify non-namespaced environment variables
        run: |
          if [ "$PARAM1" != "$TEST_VALUE_1" ]; then
            echo "Non-namespaced test failed: PARAM1 = $PARAM1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$PARAM2" != "$TEST_VALUE_2" ]; then
            echo "Non-namespaced test failed: PARAM2 = $PARAM2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Non-namespaced test passed!"

      # Test action with custom parameter mappings
      - name: Test action with custom parameter mappings
        uses: ./
        with:
          parameters:
            - "${{ env.TEST_PARAM_1 }}:CUSTOM_PARAM_1"
            - "${{ env.TEST_PARAM_2 }}:CUSTOM_PARAM_2"
          namespaced: 'true'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify custom parameter mappings
        run: |
          if [ "$CUSTOM_PARAM_1" != "$TEST_VALUE_1" ]; then
            echo "Custom mapping test failed: CUSTOM_PARAM_1 = $CUSTOM_PARAM_1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$CUSTOM_PARAM_2" != "$TEST_VALUE_2" ]; then
            echo "Custom mapping test failed: CUSTOM_PARAM_2 = $CUSTOM_PARAM_2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Custom mapping test passed!"

      - name: Clean up
        run: docker stop localstack