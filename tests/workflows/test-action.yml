name: Local Test

# This workflow is designed for local testing with 'act'
# https://github.com/nektos/act
#
# Run with: act -j local-test -W tests/workflows/test-action.yml

on:
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test
  AWS_REGION: 'us-east-1'
  TEST_PARAM_1: "/test-action/param1"
  TEST_PARAM_2: "/test-action/param2"
  TEST_VALUE_1: "value1"
  TEST_VALUE_2: "value2"
  DOCKER_ENV: true
  CHAMBER_VERSION: "2.10.12"

jobs:
  local-test:
    name: Local Action Test
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup LocalStack with combined approach
      - name: Start LocalStack and setup test parameters
        run: |
          echo "Starting LocalStack..."
          make docker-dev-env
          
          # Wait for LocalStack
          echo "Waiting for LocalStack to be ready..."
          count=0
          max_attempts=20
          
          while [ $count -lt $max_attempts ]; do
            if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
              echo "‚úÖ LocalStack is ready!"
              break
            fi
            echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
            sleep 2
            count=$((count + 1))
          done
          
          if [ $count -eq $max_attempts ]; then
            echo "::error::LocalStack did not start properly within timeout"
            exit 1
          fi

          # Configure AWS CLI
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region ${{ env.AWS_REGION }}
          aws configure set output json
          aws configure set endpoint_url http://localhost:4566

          # Create test parameters in LocalStack
          echo "Creating test parameters in LocalStack..."
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_1" --value "$TEST_VALUE_1" --type String --overwrite
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_2" --value "$TEST_VALUE_2" --type String --overwrite

          # Verify parameters were created
          param1_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "$TEST_PARAM_1" --query "Parameter.Value" --output text 2>/dev/null)
          
          if [ "$param1_value" = "$TEST_VALUE_1" ]; then
            echo "‚úÖ Test parameters created successfully!"
          else
            echo "::error::Failed to create test parameters"
            exit 1
          fi
          
          echo "CHAMBER_AWS_SSM_ENDPOINT=http://localhost:4566" >> $GITHUB_ENV

      # Install Chamber
      - name: Install Chamber
        run: make install-chamber

      # Run the actual tests with all configurations
      - name: Run action tests
        run: |
          echo "=========================================="
          echo "Testing namespaced parameters (default)..."
          echo "=========================================="
          
          # Test namespaced parameters
          ./node_modules/.bin/ts-node src/main.ts \
            --parameters "/test-action/param1
                          /test-action/param2" \
            --namespaced "true" \
            --aws-region "$AWS_REGION" \
            --aws-access-key-id "test" \
            --aws-secret-access-key "test" \
            --chamber-version "$CHAMBER_VERSION"
          
          if [ "$TEST_ACTION_PARAM1" != "value1" ]; then
            echo "‚ùå Namespaced test failed"
            exit 1
          fi
          echo "‚úÖ Namespaced parameter test passed"
          
          echo "=========================================="
          echo "Testing non-namespaced parameters..."
          echo "=========================================="
          
          # Test non-namespaced parameters
          ./node_modules/.bin/ts-node src/main.ts \
            --parameters "/test-action/param1
                          /test-action/param2" \
            --namespaced "false" \
            --aws-region "$AWS_REGION" \
            --aws-access-key-id "test" \
            --aws-secret-access-key "test" \
            --chamber-version "$CHAMBER_VERSION"
          
          if [ "$PARAM1" != "value1" ]; then
            echo "‚ùå Non-namespaced test failed"
            exit 1
          fi
          echo "‚úÖ Non-namespaced parameter test passed"
          
          echo "=========================================="
          echo "Testing custom parameter mappings..."
          echo "=========================================="
          
          # Test custom parameter mappings
          ./node_modules/.bin/ts-node src/main.ts \
            --parameters "/test-action/param1:CUSTOM_PARAM_1
                          /test-action/param2:CUSTOM_PARAM_2" \
            --namespaced "true" \
            --aws-region "$AWS_REGION" \
            --aws-access-key-id "test" \
            --aws-secret-access-key "test" \
            --chamber-version "$CHAMBER_VERSION"
          
          if [ "$CUSTOM_PARAM_1" != "value1" ]; then
            echo "‚ùå Custom mapping test failed"
            exit 1
          fi
          echo "‚úÖ Custom parameter mapping test passed"
          
          echo "=========================================="
          echo "üéâ All tests passed successfully!"
          echo "=========================================="

      # Clean up
      - name: Clean up resources
        if: always()
        run: docker compose down