name: 'Setup Chamber and Fetch SSM Parameters'
description: 'Retrieves AWS SSM parameters using Chamber and exports them as environment variables with namespace and custom name support.'
author: 'Anudeep Samaiya'
branding:
  icon: 'settings'
  color: 'orange'

inputs:
  parameters:
    description: 'List of SSM parameters with optional custom environment variable mappings (e.g. ["/my-app/db-password:MY_DB_PASSWORD", "/my-app/api-key"]).'
    required: true

  namespaced:
    description: 'If true, includes the namespace in the environment variable name (e.g. MY_APP_DB_PASSWORD). If false, uses only the parameter name (e.g. DB_PASSWORD).'
    required: false
    default: 'true'

  aws-region:
    description: 'The AWS region where your SSM parameters are stored.'
    required: false

  aws-access-key-id:
    description: 'AWS access key ID'
    required: false

  aws-secret-access-key:
    description: 'AWS secret access key'
    required: false

  chamber_version:
    description: 'Version of Chamber to install. If not specified, defaults to 2.10.12.'
    required: false
    default: '2.10.12'

runs:
  using: "composite"
  steps:
    - name: Set up AWS CLI with provided or environment credentials
      shell: bash
      run: |
        aws configure set aws_access_key_id "${{ inputs.aws-access-key-id || env.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ inputs.aws-secret-access-key || env.AWS_SECRET_ACCESS_KEY }}"
        aws configure set region "${{ inputs.aws-region || env.AWS_REGION || 'us-east-1' }}"

    - name: Install Chamber
      shell: bash
      run: |
        CHAMBER_VERSION="${{ inputs.chamber_version || env.CHAMBER_VERSION || '2.10.12' }}"

        if ! command -v chamber &> /dev/null; then
          mkdir -p /tmp/chamber

          if [[ "$CHAMBER_VERSION" == "latest" ]]; then
            RELEASES_URL="https://api.github.com/repos/segmentio/chamber/releases/latest"
            LATEST_TAG=$(curl -s $RELEASES_URL | grep -Po '"tag_name": "\K[^"]*')
            [[ -n "$LATEST_TAG" ]] && CHAMBER_VERSION=${LATEST_TAG#v} || CHAMBER_VERSION="2.10.12"
          fi

          DOWNLOAD_URL="https://github.com/segmentio/chamber/releases/download/v${CHAMBER_VERSION}/chamber-v${CHAMBER_VERSION}-linux-amd64"
          curl -sSL "$DOWNLOAD_URL" -o /tmp/chamber/chamber
          chmod +x /tmp/chamber/chamber
          sudo mv /tmp/chamber/chamber /usr/local/bin/chamber
          chamber version || echo "Warning: Chamber was installed but version check failed"
        else
          chamber version
        fi

    - name: Fetch and set SSM parameters as env variables
      shell: bash
      run: |
        echo "${{ inputs.parameters }}" | while IFS= read -r ssm_param_name || [[ -n "$ssm_param_name" ]]; do
          [[ -z "$ssm_param_name" ]] && continue

              # Extract parameter path and optional custom name (format: /path/to/param:CUSTOM_NAME)
          param=${ssm_param_name%%:*}            # Everything before colon - SSM parameter path
          custom_env_var=${ssm_param_name#*:}    # Everything after colon - custom env var name
          [[ "$param" == "$custom_env_var" ]] && custom_env_var=""  # If no colon, clear custom name

          echo "Fetching parameter: $param"

          # Split parameter path into service and key format required by Chamber
          service=$(echo "$param" | sed 's/^\///' | cut -d'/' -f1)  # First part after leading slash
          key=$(echo "$param" | sed "s/^\/$service\///;s/^$service\///")  # Everything after service

          # Fetch the parameter value using Chamber with quiet flag (value only)
          value=$(chamber read -q "$service" "$key")
          if [ $? -ne 0 ]; then
            echo "Error: Failed to fetch parameter $param"
            exit 1
          fi

          # Transform SSM parameter path to environment variable name
          prefix=$(echo "$param" | sed 's|^/||' | cut -d'/' -f1 | tr 'a-z' 'A-Z' | tr '-' '_')  # First path segment
          param_name=$(echo "$param" | sed 's|.*/||' | tr 'a-z' 'A-Z' | tr '-' '_')  # Last path segment

          # Determine final environment variable name based on options
          if [[ "${{ inputs.namespaced }}" == "false" && -n "$custom_env_var" ]]; then
            # Custom name takes precedence when provided
            env_name="$custom_env_var"
          elif [[ "${{ inputs.namespaced }}" == "false" ]]; then
            # Non-namespaced mode: use only parameter name
            env_name="$param_name"
          else
            # Namespaced mode (default): prefix_parameter_name
            env_name="${prefix}_${param_name}"
          fi

          # Export the parameter to GitHub environment
          echo "Setting parameter $param as $env_name"
          echo "$env_name=$value" >> $GITHUB_ENV
        done