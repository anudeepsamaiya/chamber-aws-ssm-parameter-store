name: 'Setup Chamber and Fetch SSM Parameters'
description: |
  This Action sets up Chamber, retrieves AWS SSM parameters, and exports them as environment variables for use in workflows.
author: 'Anudeep Samaiya'
branding:
  icon: 'settings'
  color: 'blue'

inputs:
  parameters:
    description: 'List of SSM parameters with optional custom environment variable mappings (e.g. ["/my-app/db-password:MY_DB_PASSWORD", "/my-app/api-key"]).'
    required: true
    type: list

  namespaced:
    description: 'If true, includes the namespace in the environment variable name (e.g. MY_APP_DB_PASSWORD). If false, uses only the parameter name (e.g. DB_PASSWORD).'
    required: false
    default: 'true'

  aws-region:
    description: 'The AWS region where your SSM parameters are stored.'
    required: false

  aws-access-key-id:
    description: 'AWS access key ID'
    required: false

  aws-secret-access-key:
    description: 'AWS secret access key'
    required: false

runs:
  using: "composite"
  steps:
    - name: Set up AWS CLI with provided or environment credentials
      shell: bash
      run: |
        aws configure set aws_access_key_id "${{ inputs.aws-access-key-id || env.AWS_ACCESS_KEY_ID }}"
        aws configure set aws_secret_access_key "${{ inputs.aws-secret-access-key || env.AWS_SECRET_ACCESS_KEY }}"
        aws configure set region "${{ inputs.aws-region || env.AWS_REGION || 'us-east-1' }}"

    - name: Install Chamber
      shell: bash
      run: |
        CHAMBER_VERSION="${{ inputs.chamber_version || env.CHAMBER_VERSION || 'latest' }}"

        # Check if Chamber is installed and use the specified version
        if ! command -v chamber &> /dev/null; then
          echo "Chamber not found, installing version $CHAMBER_VERSION..."
          curl -sSL "https://github.com/segmentio/chamber/releases/download/v$CHAMBER_VERSION/chamber-linux-amd64" -o /usr/local/bin/chamber
          chmod +x /usr/local/bin/chamber
        fi

    - name: Fetch and set SSM parameters as env variables
      shell: bash
      run: |
        for ssm_param_name in ${{ toJson(inputs.parameters) }}; do
          param=${ssm_param_name%%:*}  # Extract SSM parameter (before the colon)
          custom_env_var=${ssm_param_name#*:}  # Extract custom env var (after the colon)

          # Fetch parameter value using Chamber
          value=$(chamber read "$param")

          # Extract the prefix (namespace) from the parameter (first part before the slash)
          prefix=$(echo "$param" | sed 's|/||' | cut -d'/' -f1 | tr 'a-z' 'A-Z')

          # Handle custom logic in shell
          if [[ "${{ inputs.namespaced }}" == "false" && -n "$custom_env_var" ]]; then
            param_name="$custom_env_var"
          else
            param_name="${prefix}_$(echo "$param" | sed 's|/[^/]*$||' | tr '/' '_')"
          fi

          # Export the parameter to the environment
          echo "$param_name=$value" >> $GITHUB_ENV
        done
