name: Test

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  TEST_PARAM_1: "/test-action/param1"
  TEST_PARAM_2: "/test-action/param2"
  TEST_VALUE_1: "value1"
  TEST_VALUE_2: "value2"

jobs:
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run unit tests
        run: npm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          directory: ./coverage

  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup LocalStack
        run: |
          docker compose up -d localstack
          echo "Waiting for LocalStack to be ready..."
          count=0
          max_attempts=20
          while [ $count -lt $max_attempts ]; do
            if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
              echo "✅ LocalStack is ready\!"
              break
            fi
            echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
            sleep 2
            count=$((count + 1))
          done
          if [ $count -eq $max_attempts ]; then
            echo "::error::LocalStack did not start properly within timeout"
            exit 1
          fi

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region us-east-1
          aws configure set output json
          aws configure set endpoint_url http://localhost:4566

      - name: Create test parameters
        run: |
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_1" --value "$TEST_VALUE_1" --type String --overwrite
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_2" --value "$TEST_VALUE_2" --type String --overwrite

          # Verify parameters were created
          param1_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "$TEST_PARAM_1" --query "Parameter.Value" --output text 2>/dev/null)
          
          if [ "$param1_value" = "$TEST_VALUE_1" ]; then
            echo "✅ Test parameters created successfully\!"
          else
            echo "::error::Failed to create test parameters"
            exit 1
          fi

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Chamber
        run: make install-chamber

      - name: Run integration tests
        run: |
          export CHAMBER_AWS_SSM_ENDPOINT=http://localhost:4566
          npm run test:integration

      - name: Cleanup
        if: always()
        run: docker compose down

  action-test:
    name: Action Test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup LocalStack
        run: |
          docker compose up -d localstack
          echo "Waiting for LocalStack to be ready..."
          count=0
          max_attempts=20
          while [ $count -lt $max_attempts ]; do
            if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
              echo "✅ LocalStack is ready\!"
              break
            fi
            echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
            sleep 2
            count=$((count + 1))
          done
          if [ $count -eq $max_attempts ]; then
            echo "::error::LocalStack did not start properly within timeout"
            exit 1
          fi

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id test
          aws configure set aws_secret_access_key test
          aws configure set region us-east-1
          aws configure set output json
          aws configure set endpoint_url http://localhost:4566

      - name: Create test parameters
        run: |
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_1" --value "$TEST_VALUE_1" --type String --overwrite
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "$TEST_PARAM_2" --value "$TEST_VALUE_2" --type String --overwrite

      # Install Chamber locally for testing
      - name: Install Chamber
        run: |
          CHAMBER_VERSION="2.10.12" # using a specific stable version
          echo "Installing Chamber version $CHAMBER_VERSION..."
          mkdir -p /tmp/chamber
          curl -sSL "https://github.com/segmentio/chamber/releases/download/v${CHAMBER_VERSION}/chamber-v${CHAMBER_VERSION}-linux-amd64" -o /tmp/chamber/chamber
          chmod +x /tmp/chamber/chamber
          sudo mv /tmp/chamber/chamber /usr/local/bin/chamber
          chamber version

      # Test action with namespaced parameters
      - name: Test action with namespaced parameters
        uses: ./
        env:
          CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}
            ${{ env.TEST_PARAM_2 }}
          namespaced: 'true'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify namespaced environment variables
        run: |
          if [ "$TEST_ACTION_PARAM1" \!= "$TEST_VALUE_1" ]; then
            echo "Namespaced test failed: TEST_ACTION_PARAM1 = $TEST_ACTION_PARAM1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$TEST_ACTION_PARAM2" \!= "$TEST_VALUE_2" ]; then
            echo "Namespaced test failed: TEST_ACTION_PARAM2 = $TEST_ACTION_PARAM2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Namespaced test passed\!"

      # Test action with non-namespaced parameters
      - name: Test action with non-namespaced parameters
        uses: ./
        env:
          CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}
            ${{ env.TEST_PARAM_2 }}
          namespaced: 'false'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify non-namespaced environment variables
        run: |
          if [ "$PARAM1" \!= "$TEST_VALUE_1" ]; then
            echo "Non-namespaced test failed: PARAM1 = $PARAM1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$PARAM2" \!= "$TEST_VALUE_2" ]; then
            echo "Non-namespaced test failed: PARAM2 = $PARAM2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Non-namespaced test passed\!"

      # Test action with custom parameter mappings
      - name: Test action with custom parameter mappings
        uses: ./
        env:
          CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}:CUSTOM_PARAM_1
            ${{ env.TEST_PARAM_2 }}:CUSTOM_PARAM_2
          namespaced: 'true'
          aws-region: 'us-east-1'
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      # Verify environment variables are set correctly
      - name: Verify custom parameter mappings
        run: |
          if [ "$CUSTOM_PARAM_1" \!= "$TEST_VALUE_1" ]; then
            echo "Custom mapping test failed: CUSTOM_PARAM_1 = $CUSTOM_PARAM_1, expected $TEST_VALUE_1"
            exit 1
          fi
          if [ "$CUSTOM_PARAM_2" \!= "$TEST_VALUE_2" ]; then
            echo "Custom mapping test failed: CUSTOM_PARAM_2 = $CUSTOM_PARAM_2, expected $TEST_VALUE_2"
            exit 1
          fi
          echo "Custom mapping test passed\!"

      - name: Clean up
        if: always()
        run: docker compose down
EOF < /dev/null