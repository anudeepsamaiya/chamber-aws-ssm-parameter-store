name: Test Parameter Configurations

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  TEST_PARAM_1: "/test-action/param1"
  TEST_PARAM_2: "/test-action/param2"
  TEST_VALUE_1: "value1"
  TEST_VALUE_2: "value2"

jobs:
  parameter-configs:
    name: Test Parameter Configurations
    runs-on: ubuntu-latest
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: ssm
          DEFAULT_REGION: ${{ env.AWS_REGION }}
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -s http://localhost:4566/health?services=ssm | grep -q '\"ssm\": \"running\"'"
          --health-interval 5s
          --health-timeout 5s
          --health-retries 5
          --health-start-period 10s
    env:
      AWS_ACCESS_KEY_ID: test
      AWS_SECRET_ACCESS_KEY: test
      CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
      DOCKER_ENV: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: make setup
      
      # Verify LocalStack is ready and create test parameters
      - name: Verify LocalStack and create test parameters
        run: |
          # Double-check LocalStack is ready (in addition to service container health check)
          echo "Verifying LocalStack is ready..."
          count=0
          max_attempts=10
          
          while [ $count -lt $max_attempts ]; do
            if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
              echo "✅ LocalStack is ready!"
              break
            fi
            echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
            sleep 2
            count=$((count + 1))
          done
          
          if [ $count -eq $max_attempts ]; then
            echo "::error::LocalStack did not start properly within timeout"
            exit 1
          fi
          
          # Create test parameters in LocalStack
          echo "Creating test parameters in LocalStack..."
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "${{ env.TEST_PARAM_1 }}" --value "${{ env.TEST_VALUE_1 }}" --type String --overwrite
          aws --endpoint-url=http://localhost:4566 ssm put-parameter \
            --name "${{ env.TEST_PARAM_2 }}" --value "${{ env.TEST_VALUE_2 }}" --type String --overwrite

          # Verify parameters were created
          param1_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "${{ env.TEST_PARAM_1 }}" --query "Parameter.Value" --output text 2>/dev/null)
          
          if [ "$param1_value" = "${{ env.TEST_VALUE_1 }}" ]; then
            echo "✅ Test parameters created successfully!"
          else
            echo "::error::Failed to create test parameters"
            exit 1
          fi

      # Test 1: Namespaced parameters
      - name: Test namespaced parameters
        id: namespaced_test
        uses: ./
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}
            ${{ env.TEST_PARAM_2 }}
          namespaced: 'true'
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Verify namespaced parameters
        run: |
          if [ "$TEST_ACTION_PARAM1" != "${{ env.TEST_VALUE_1 }}" ]; then
            echo "::error::Namespaced test failed: TEST_ACTION_PARAM1 = $TEST_ACTION_PARAM1, expected ${{ env.TEST_VALUE_1 }}"
            exit 1
          fi
          echo "✅ Namespaced parameter test passed!"

      # Test 2: Non-namespaced parameters
      - name: Test non-namespaced parameters
        id: non_namespaced_test
        uses: ./
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}
            ${{ env.TEST_PARAM_2 }}
          namespaced: 'false'
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Verify non-namespaced parameters
        run: |
          if [ "$PARAM1" != "${{ env.TEST_VALUE_1 }}" ]; then
            echo "::error::Non-namespaced test failed: PARAM1 = $PARAM1, expected ${{ env.TEST_VALUE_1 }}"
            exit 1
          fi
          echo "✅ Non-namespaced parameter test passed!"

      # Test 3: Custom parameter mappings
      - name: Test custom parameter mappings
        id: custom_mapping_test
        uses: ./
        with:
          parameters: |
            ${{ env.TEST_PARAM_1 }}:CUSTOM_PARAM_1
            ${{ env.TEST_PARAM_2 }}:CUSTOM_PARAM_2
          namespaced: 'true'
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}

      - name: Verify custom parameter mappings
        run: |
          if [ "$CUSTOM_PARAM_1" != "${{ env.TEST_VALUE_1 }}" ]; then
            echo "::error::Custom mapping test failed: CUSTOM_PARAM_1 = $CUSTOM_PARAM_1, expected ${{ env.TEST_VALUE_1 }}"
            exit 1
          fi
          echo "✅ Custom parameter mapping test passed!"

      - name: Generate test summary
        if: always()
        run: |
          echo "## Parameter Configuration Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespaced Parameters**: ${{ steps.namespaced_test.outcome || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Non-namespaced Parameters**: ${{ steps.non_namespaced_test.outcome || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Parameter Mappings**: ${{ steps.custom_mapping_test.outcome || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY