name: Test Action Configurations

on:
  workflow_call:
    inputs:
      aws_region:
        description: 'AWS region to use'
        required: false
        type: string
        default: 'us-east-1'
      timeout:
        description: 'Test timeout in minutes'
        required: false
        type: number
        default: 5

jobs:
  # Common setup job - sets up LocalStack just once
  setup:
    name: Setup Test Environment
    runs-on: ubuntu-latest
    outputs:
      endpoint_url: ${{ steps.setup_result.outputs.endpoint_url }}
      status: ${{ steps.setup_result.outputs.status }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Setup Node.js for better GitHub Actions caching
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci
        
      # Call reusable workflow for LocalStack setup
      - uses: ./.github/workflows/setup-localstack.yml
        id: setup_localstack
        with:
          wait_time: 30
          max_retries: 10
          aws_region: ${{ inputs.aws_region }}
          
      - name: Record setup result
        id: setup_result
        run: |
          echo "endpoint_url=http://localhost:4566" >> $GITHUB_OUTPUT
          echo "status=${{ steps.setup_localstack.outputs.status }}" >> $GITHUB_OUTPUT

  # Test namespaced parameters configuration
  test-namespaced:
    name: Test Action with Namespaced Parameters
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.status == 'success' && needs.setup.outputs.params_ready == 'true'
    timeout-minutes: ${{ inputs.timeout }}
    container:
      # Use container-based job to ensure consistent environment with setup job
      image: node:18
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: ${{ inputs.aws_region }}
        CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        DOCKER_ENV: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Test 1: Namespaced parameters
      - name: Test action with namespaced parameters
        id: namespaced_test
        uses: ./
        with:
          parameters: |
            /test-action/param1
            /test-action/param2
          namespaced: 'true'
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      - name: Verify namespaced environment variables
        run: |
          echo "Testing namespaced parameters..."
          if [ "$TEST_ACTION_PARAM1" != "value1" ]; then
            echo "::error::Namespaced test failed: TEST_ACTION_PARAM1 = $TEST_ACTION_PARAM1, expected value1"
            exit 1
          fi
          if [ "$TEST_ACTION_PARAM2" != "value2" ]; then
            echo "::error::Namespaced test failed: TEST_ACTION_PARAM2 = $TEST_ACTION_PARAM2, expected value2"
            exit 1
          fi
          echo "✅ Namespaced parameters test passed!"

  # Test non-namespaced parameters configuration
  test-non-namespaced:
    name: Test Action with Non-Namespaced Parameters
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.status == 'success' && needs.setup.outputs.params_ready == 'true'
    timeout-minutes: ${{ inputs.timeout }}
    container:
      # Use container-based job to ensure consistent environment with setup job
      image: node:18
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: ${{ inputs.aws_region }}
        CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        DOCKER_ENV: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Test 2: Non-namespaced parameters
      - name: Test action with non-namespaced parameters
        id: non_namespaced_test
        uses: ./
        with:
          parameters: |
            /test-action/param1
            /test-action/param2
          namespaced: 'false'
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      - name: Verify non-namespaced environment variables
        run: |
          echo "Testing non-namespaced parameters..."
          if [ "$PARAM1" != "value1" ]; then
            echo "::error::Non-namespaced test failed: PARAM1 = $PARAM1, expected value1"
            exit 1
          fi
          if [ "$PARAM2" != "value2" ]; then
            echo "::error::Non-namespaced test failed: PARAM2 = $PARAM2, expected value2"
            exit 1
          fi
          echo "✅ Non-namespaced parameters test passed!"

  # Test custom parameter mapping configuration
  test-custom-mapping:
    name: Test Action with Custom Parameter Mappings
    runs-on: ubuntu-latest
    needs: setup
    if: needs.setup.outputs.status == 'success' && needs.setup.outputs.params_ready == 'true'
    timeout-minutes: ${{ inputs.timeout }}
    container:
      # Use container-based job to ensure consistent environment with setup job
      image: node:18
      env:
        AWS_ACCESS_KEY_ID: test
        AWS_SECRET_ACCESS_KEY: test
        AWS_REGION: ${{ inputs.aws_region }}
        CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
        DOCKER_ENV: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Test 3: Custom parameter mappings
      - name: Test action with custom parameter mappings
        id: custom_mapping_test
        uses: ./
        with:
          parameters: |
            /test-action/param1:CUSTOM_PARAM_1
            /test-action/param2:CUSTOM_PARAM_2
          namespaced: 'true'
          aws-region: ${{ inputs.aws_region }}
          aws-access-key-id: 'test'
          aws-secret-access-key: 'test'

      - name: Verify custom parameter mappings
        run: |
          echo "Testing custom parameter mappings..."
          if [ "$CUSTOM_PARAM_1" != "value1" ]; then
            echo "::error::Custom mapping test failed: CUSTOM_PARAM_1 = $CUSTOM_PARAM_1, expected value1"
            exit 1
          fi
          if [ "$CUSTOM_PARAM_2" != "value2" ]; then
            echo "::error::Custom mapping test failed: CUSTOM_PARAM_2 = $CUSTOM_PARAM_2, expected value2"
            exit 1
          fi
          echo "✅ Custom parameter mappings test passed!"

  # Test for compliance with GitHub regulations
  action-standards:
    name: Test Action Compliance with GitHub Standards
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Validate action.yml format
        run: |
          echo "Validating action.yml format..."
          cat action.yml | yq eval . - > /dev/null
          
      - name: Check required fields
        run: |
          echo "Checking required action.yml fields..."
          # Check that name is present
          if ! grep -q "^name:" action.yml; then
            echo "::error::Missing required field 'name' in action.yml"
            exit 1
          fi
          
          # Check that description is present
          if ! grep -q "^description:" action.yml; then
            echo "::error::Missing required field 'description' in action.yml"
            exit 1
          fi
          
          # Check that runs section is present
          if ! grep -q "^runs:" action.yml; then
            echo "::error::Missing required field 'runs' in action.yml"
            exit 1
          fi
          
          echo "✅ Action.yml validation passed"

  # Final job to aggregate results
  summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [setup, test-namespaced, test-non-namespaced, test-custom-mapping, action-standards]
    if: always()
    steps:
      - name: Generate test report
        run: |
          echo "## Action Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Setup**: ${{ needs.setup.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Namespaced Parameters**: ${{ needs.test-namespaced.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Non-Namespaced Parameters**: ${{ needs.test-non-namespaced.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Custom Parameter Mappings**: ${{ needs.test-custom-mapping.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Action Standards**: ${{ needs.action-standards.result || 'skipped' }}" >> $GITHUB_STEP_SUMMARY
          
          # Determine overall status
          if [[ "${{ needs.setup.result }}" == "success" && \
                "${{ needs.test-namespaced.result }}" == "success" && \
                "${{ needs.test-non-namespaced.result }}" == "success" && \
                "${{ needs.test-custom-mapping.result }}" == "success" && \
                "${{ needs.action-standards.result }}" == "success" ]]; then
            echo "✅ All tests passed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "::notice::All action configuration tests passed!"
          else
            echo "❌ Some tests failed or were skipped. See individual job results for details." >> $GITHUB_STEP_SUMMARY
            echo "::warning::Some action configuration tests failed or were skipped."
          fi