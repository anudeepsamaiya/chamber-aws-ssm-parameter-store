name: Tests

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18'
  AWS_REGION: 'us-east-1'
  TEST_PARAM_1: "/test-action/param1"
  TEST_PARAM_2: "/test-action/param2"
  TEST_VALUE_1: "value1"
  TEST_VALUE_2: "value2"
  AWS_ACCESS_KEY_ID: test
  AWS_SECRET_ACCESS_KEY: test

jobs:
  # Unit Tests - Fast tests that don't need LocalStack
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: make setup
        
      - name: Run unit tests
        id: unit_tests
        run: make test-unit-local
      
      - name: Upload test coverage
        if: success()
        uses: actions/upload-artifact@v3
        with:
          name: unit-test-coverage
          path: coverage/
          retention-days: 5
      
      - name: Generate test summary
        if: always()
        run: |
          echo "## Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Unit Tests**: ${{ steps.unit_tests.outcome || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY

  # Integration Tests - These need LocalStack
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: ssm
          DEFAULT_REGION: ${{ env.AWS_REGION }}
          DEBUG: 1
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -s http://localhost:4566/health?services=ssm | grep -q '\"ssm\": \"running\"' || exit 1"
          --health-interval 3s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 10s
    env:
      CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
      DOCKER_ENV: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: make setup
      
      # Verify LocalStack is ready and create test parameters
      - name: Verify LocalStack and create test parameters
        run: |
          # Use Makefile command if available
          if [ -f "Makefile" ] && grep -q "setup-test-params" Makefile; then
            echo "Setting up test parameters using Makefile..."
            make setup-test-params AWS_ENDPOINT_URL=http://localhost:4566
          else
            # Double-check LocalStack is ready (in addition to service container health check)
            echo "Verifying LocalStack is ready..."
            count=0
            max_attempts=15
            
            while [ $count -lt $max_attempts ]; do
              if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
                echo "✅ LocalStack is ready!"
                break
              fi
              echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
              sleep 2
              count=$((count + 1))
            done
            
            if [ $count -eq $max_attempts ]; then
              echo "::error::LocalStack did not start properly within timeout"
              exit 1
            fi
            
            # Create test parameters in LocalStack
            echo "Creating test parameters in LocalStack..."
            aws --endpoint-url=http://localhost:4566 ssm put-parameter \
              --name "${{ env.TEST_PARAM_1 }}" --value "${{ env.TEST_VALUE_1 }}" --type String --overwrite
            aws --endpoint-url=http://localhost:4566 ssm put-parameter \
              --name "${{ env.TEST_PARAM_2 }}" --value "${{ env.TEST_VALUE_2 }}" --type String --overwrite
          fi

          # Always verify parameters were created successfully
          echo "Verifying parameters were created successfully..."
          param1_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "${{ env.TEST_PARAM_1 }}" --query "Parameter.Value" --output text 2>/dev/null)
          param2_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "${{ env.TEST_PARAM_2 }}" --query "Parameter.Value" --output text 2>/dev/null)
          
          if [ "$param1_value" = "${{ env.TEST_VALUE_1 }}" ] && [ "$param2_value" = "${{ env.TEST_VALUE_2 }}" ]; then
            echo "✅ Test parameters created and verified successfully!"
          else
            echo "::error::Failed to create or verify test parameters"
            exit 1
          fi
      
      # Run integration tests
      - name: Run integration tests
        id: integration_tests
        run: make test-integration-local
      
      # Generate summary for integration tests
      - name: Generate integration test summary
        if: always()
        run: |
          echo "## Integration Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Integration Tests**: ${{ steps.integration_tests.outcome || 'Unknown' }}" >> $GITHUB_STEP_SUMMARY

  # Configuration Tests - Test different parameter configurations
  config-tests:
    name: Configuration Tests
    runs-on: ubuntu-latest
    needs: unit-tests
    strategy:
      matrix:
        include:
          - config_id: namespaced
            namespaced: 'true'
            parameters: |
              ${{ env.TEST_PARAM_1 }}
              ${{ env.TEST_PARAM_2 }}
            expected_var: TEST_ACTION_PARAM1
          
          - config_id: non_namespaced
            namespaced: 'false'  
            parameters: |
              ${{ env.TEST_PARAM_1 }}
              ${{ env.TEST_PARAM_2 }}
            expected_var: PARAM1
            
          - config_id: custom_mapping
            namespaced: 'true'
            parameters: |
              ${{ env.TEST_PARAM_1 }}:CUSTOM_PARAM_1
              ${{ env.TEST_PARAM_2 }}:CUSTOM_PARAM_2
            expected_var: CUSTOM_PARAM_1
    services:
      localstack:
        image: localstack/localstack:latest
        env:
          SERVICES: ssm
          DEFAULT_REGION: ${{ env.AWS_REGION }}
          DEBUG: 1
        ports:
          - 4566:4566
        options: >-
          --health-cmd "curl -s http://localhost:4566/health?services=ssm | grep -q '\"ssm\": \"running\"' || exit 1"
          --health-interval 3s
          --health-timeout 5s
          --health-retries 10
          --health-start-period 10s
    env:
      CHAMBER_AWS_SSM_ENDPOINT: http://localhost:4566
      DOCKER_ENV: "true"
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          
      - name: Install dependencies
        run: make setup
      
      # Verify LocalStack is ready and create test parameters
      - name: Verify LocalStack and create test parameters
        run: |
          # Use Makefile command if available
          if [ -f "Makefile" ] && grep -q "setup-test-params" Makefile; then
            echo "Setting up test parameters using Makefile..."
            make setup-test-params AWS_ENDPOINT_URL=http://localhost:4566
          else
            # Double-check LocalStack is ready (in addition to service container health check)
            echo "Verifying LocalStack is ready..."
            count=0
            max_attempts=15
            
            while [ $count -lt $max_attempts ]; do
              if curl -s http://localhost:4566/health?services=ssm | grep -q '"ssm": "running"'; then
                echo "✅ LocalStack is ready!"
                break
              fi
              echo "Waiting for LocalStack... (attempt $(( count + 1 ))/$max_attempts)"
              sleep 2
              count=$((count + 1))
            done
            
            if [ $count -eq $max_attempts ]; then
              echo "::error::LocalStack did not start properly within timeout"
              exit 1
            fi
            
            # Create test parameters in LocalStack
            echo "Creating test parameters in LocalStack..."
            aws --endpoint-url=http://localhost:4566 ssm put-parameter \
              --name "${{ env.TEST_PARAM_1 }}" --value "${{ env.TEST_VALUE_1 }}" --type String --overwrite
            aws --endpoint-url=http://localhost:4566 ssm put-parameter \
              --name "${{ env.TEST_PARAM_2 }}" --value "${{ env.TEST_VALUE_2 }}" --type String --overwrite
          fi

          # Always verify parameters were created successfully
          echo "Verifying parameters were created successfully..."
          param1_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "${{ env.TEST_PARAM_1 }}" --query "Parameter.Value" --output text 2>/dev/null)
          param2_value=$(aws --endpoint-url=http://localhost:4566 ssm get-parameter \
              --name "${{ env.TEST_PARAM_2 }}" --query "Parameter.Value" --output text 2>/dev/null)
          
          if [ "$param1_value" = "${{ env.TEST_VALUE_1 }}" ] && [ "$param2_value" = "${{ env.TEST_VALUE_2 }}" ]; then
            echo "✅ Test parameters created and verified successfully!"
          else
            echo "::error::Failed to create or verify test parameters"
            exit 1
          fi
      
      # Test parameter configuration
      - name: Test parameter configuration
        id: config_test
        uses: ./
        with:
          parameters: ${{ matrix.parameters }}
          namespaced: ${{ matrix.namespaced }}
          aws-region: ${{ env.AWS_REGION }}
          aws-access-key-id: ${{ env.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.AWS_SECRET_ACCESS_KEY }}
          
      # Verify parameter configuration
      - name: Verify parameter configuration
        run: |
          # Check what configuration we're testing based on the matrix values
          case "${{ matrix.config_id }}" in
            namespaced)
              if [ "$TEST_ACTION_PARAM1" != "${{ env.TEST_VALUE_1 }}" ]; then
                echo "::error::Namespaced test failed: TEST_ACTION_PARAM1 = $TEST_ACTION_PARAM1, expected ${{ env.TEST_VALUE_1 }}"
                exit 1
              fi
              echo "✅ Namespaced parameter test passed!"
              ;;
              
            non_namespaced)
              if [ "$PARAM1" != "${{ env.TEST_VALUE_1 }}" ]; then
                echo "::error::Non-namespaced test failed: PARAM1 = $PARAM1, expected ${{ env.TEST_VALUE_1 }}"
                exit 1
              fi
              echo "✅ Non-namespaced parameter test passed!"
              ;;
              
            custom_mapping)
              if [ "$CUSTOM_PARAM_1" != "${{ env.TEST_VALUE_1 }}" ]; then
                echo "::error::Custom mapping test failed: CUSTOM_PARAM_1 = $CUSTOM_PARAM_1, expected ${{ env.TEST_VALUE_1 }}"
                exit 1
              fi
              echo "✅ Custom parameter mapping test passed!"
              ;;
              
            *)
              echo "::error::Unknown test configuration: ${{ matrix.config_id }}"
              exit 1
              ;;
          esac

      # Generate summary for configuration tests
      - name: Generate configuration test summary
        if: always()
        run: |
          echo "## Configuration Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Configuration**: ${{ matrix.config_id }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Status**: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY